use crate::state::{DedupStrategyPreset, DedupStrategySettings, SimilarityMethod, SimilarityWeighting};
use crate::config::DynamicConfig;
use std::collections::HashMap;

// TODO: Should come from Typedb Database or a p2p store
/// Predefined presets for common deduplication scenarios
pub const DEDUP_PRESETS: &[DedupStrategyPreset] = &[
    DedupStrategyPreset {
        name: String::from("Exact Match"),
        description: String::from("Find identical text, including spacing and punctuation"),
        settings: DedupStrategySettings {
            case_sensitive: Some(false),
            ignore_whitespace: Some(true),
            ignore_punctuation: Some(false),
            normalize_unicode: Some(false),
            split_strategy: Some(String::from("Words")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(10),
            similarity_threshold: Some(0.95),
            similarity_method: Some(String::from("Exact")),
            use_parallel: Some(true),
            ignore_stopwords: Some(false),
            stemming: Some(false),
            ngram_size: Some(3),
            language_detection: Some(false),
            encoding_normalization: Some(true),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.4_f64,
                position: 0.4_f64,
                context: 0.2_f64,
            }),
            adaptive_thresholding: Some(false),
            config: Some(DynamicConfig::default()),
        },
    },
    DedupStrategyPreset {
        name: String::from("Near Match"),
        description: String::from("Find text with minor formatting differences"),
        settings: DedupStrategySettings {
            case_sensitive: Some(false),
            ignore_whitespace: Some(true),
            ignore_punctuation: Some(true),
            normalize_unicode: Some(true),
            split_strategy: Some(String::from("Words")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(10),
            similarity_threshold: Some(0.8),
            similarity_method: Some(String::from("Levenshtein")),
            use_parallel: Some(true),
            ignore_stopwords: Some(true),
            stemming: Some(false),
            ngram_size: Some(3),
            language_detection: Some(false),
            encoding_normalization: Some(true),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.5_f64,
                position: 0.3_f64,
                context: 0.2_f64,
            }),
            adaptive_thresholding: Some(true),
            config: Some(DynamicConfig::default()),
        },
    },
    DedupStrategyPreset {
        name: String::from("Fuzzy Match"),
        description: String::from("Find text with typos and small variations"),
        settings: DedupStrategySettings {
            case_sensitive: Some(false),
            ignore_whitespace: Some(true),
            ignore_punctuation: Some(true),
            normalize_unicode: Some(true),
            split_strategy: Some(String::from("Sentences")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(5),
            similarity_threshold: Some(0.7),
            similarity_method: Some(String::from("Levenshtein")),
            use_parallel: Some(true),
            ignore_stopwords: Some(true),
            stemming: Some(true),
            ngram_size: Some(2),
            language_detection: Some(true),
            encoding_normalization: Some(true),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.6_f64,
                position: 0.2_f64,
                context: 0.2_f64,
            }),
            adaptive_thresholding: Some(true),
            config: Some(DynamicConfig::default()),
        },
    },
    DedupStrategyPreset {
        name: String::from("Similar Ideas"),
        description: String::from("Find text expressing similar concepts"),
        settings: DedupStrategySettings {
            case_sensitive: Some(false),
            ignore_whitespace: Some(true),
            ignore_punctuation: Some(true),
            normalize_unicode: Some(true),
            split_strategy: Some(String::from("Paragraphs")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(20),
            similarity_threshold: Some(0.6),
            similarity_method: Some(String::from("Semantic")),
            use_parallel: Some(true),
            ignore_stopwords: Some(true),
            stemming: Some(true),
            ngram_size: Some(3),
            language_detection: Some(true),
            encoding_normalization: Some(true),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.3_f64,
                position: 0.3_f64,
                context: 0.4_f64,
            }),
            adaptive_thresholding: Some(true),
            config: Some(DynamicConfig {
                base: Default::default(),
                user_stop_words: {
                    let mut map = HashMap::new();
                    map.insert("en".to_string(), ["very", "much", "quite", "rather"].iter().map(|&s| s.to_string()).collect());
                    map.insert("es".to_string(), ["muy", "bastante", "más", "bien"].iter().map(|&s| s.to_string()).collect());
                    map.insert("fr".to_string(), ["très", "beaucoup", "assez", "plutôt"].iter().map(|&s| s.to_string()).collect());
                    map
                },
                user_sentence_delimiters: [';', ':'].iter().copied().collect(),
                user_paragraph_delimiters: Some("\n\n---\n\n".to_string()),
            }),
        },
    },
    DedupStrategyPreset {
        name: String::from("Strict Large Blocks"),
        description: String::from("Looks for large duplicated character sequences (useful for code or logs)"),
        settings: DedupStrategySettings {
            case_sensitive: Some(true),
            ignore_whitespace: Some(false),
            ignore_punctuation: Some(false),
            normalize_unicode: Some(false),
            split_strategy: Some(String::from("Characters")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(50),
            similarity_threshold: Some(0.9),
            similarity_method: Some(String::from("Exact")),
            use_parallel: Some(true),
            ignore_stopwords: Some(false),
            stemming: Some(false),
            ngram_size: Some(5),
            language_detection: Some(false),
            encoding_normalization: Some(false),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.8_f64,
                position: 0.1_f64,
                context: 0.1_f64,
            }),
            adaptive_thresholding: Some(false),
            config: Some(DynamicConfig {
                base: Default::default(),
                user_stop_words: Default::default(),
                user_sentence_delimiters: Default::default(),
                user_paragraph_delimiters: Some("\n\n</code>\n\n".to_string()),
            }),
        },
    },
    DedupStrategyPreset {
        name: String::from("Loose Paragraph Matching"),
        description: String::from("Groups paragraphs that share a high-level similarity or partial overlap"),
        settings: DedupStrategySettings {
            case_sensitive: Some(false),
            ignore_whitespace: Some(true),
            ignore_punctuation: Some(true),
            normalize_unicode: Some(true),
            split_strategy: Some(String::from("Paragraphs")),
            comparison_scope: Some(String::from("Global")),
            min_length: Some(20),
            similarity_threshold: Some(0.65),
            similarity_method: Some(String::from("Semantic")),
            use_parallel: Some(true),
            ignore_stopwords: Some(true),
            stemming: Some(true),
            ngram_size: Some(2),
            language_detection: Some(true),
            encoding_normalization: Some(true),
            similarity_weighting: Some(SimilarityWeighting {
                frequency: 0.4_f64,
                position: 0.2_f64,
                context: 0.4_f64,
            }),
            adaptive_thresholding: Some(true),
            config: Some(DynamicConfig {
                base: Default::default(),
                user_stop_words: ["example", "note", "warning", "important"].iter().map(|&s| s.to_string()).collect(),
                user_sentence_delimiters: [':', ';', '|'].iter().copied().collect(),
                user_paragraph_delimiters: Some("\n\n---\n\n".to_string()),
            }),
        },
    },
];
